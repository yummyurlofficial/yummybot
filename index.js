const TelegramBot = require("node-telegram-bot-api");
const express = require("express");
const Database = require("./database");
const axios  = require("axios");

const app = express();

// Web server for health check
app.get("/", (req, res) => {
  res.send("Bot is running!");
});

const PORT = process.env.PORT || 3000;

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});


// Telegram bot token
const botToken = "7235896479:AAHeHufxmxVfmHmCAbShhjQ0kJzOaQRZ2us"; // Replace with your actual token
const bot = new TelegramBot(botToken, { polling: true });

// /start command
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username || "User";

  const welcomeMessage = `
Hello, ${username} üëã

I Am *YummyURL Link Converter*\\. I Can Convert Links Directly From Your yummyurl\\.com Account\\.

üöÄ **To Get Started**:
1\\. Go To üëâ [https://yummyurl\\.com/member/tools/api](https://yummyurl.com/member/tools/api)\\

2\\. Then Copy Your API Key\\.

3\\. Then Type **/api**, give a single space, and paste your API Key\\.  
   \\(See example below to understand more\\)

**Example**: \`/api f4e1781dfebf0f6\`

üíÅ‚Äç‚ôÄÔ∏è Hit üëâ **/help** To Get Help\\.

‚ûï Hit üëâ **/footer** To Get Help About Adding Your Custom Footer To Bot\\. 

‚ûï Hit üëâ **/header** To Get Help About Adding Your Custom Header To Bot\\.

Happy linkingüéâ
`;

  bot
    .sendMessage(chatId, welcomeMessage, {
      parse_mode: "MarkdownV2",
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "Visit YummyURL",
              url: "https://yummyurl.com",
            },
          ],
        ],
      },
    })
    .catch((err) => console.error("Error sending /start message:", err));
});

// /help command
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;

  const helpMessage = `
Hey My name is *YummyURL Link Converter Bot* and I'm a link converter and shortener bot \\.

*Features:*
‚Ä¢ Hyperlink support üîó
‚Ä¢ Button conversion support üîò
‚Ä¢ Domain inclusion and exclusion options üåê
‚Ä¢ Header and footer text support üìù
‚Ä¢ Replace username function üìé
‚Ä¢ Banner image support üñº

*Useful Commands:*
‚Ä¢ /start ‚Äî Start me up\\. You probably already used this\\.
‚Ä¢ /help ‚Äî Sends this message\\. I‚Äôll tell you more about myself\\.

*Available Commands:*
‚Ä¢ /api ‚Äî Use this command to For API key  \\.
‚Ä¢ /header ‚Äî Command For  header text\\.
‚Ä¢ /footer ‚Äî Command For footer text\\.
‚Ä¢ /username ‚Äî For username\\.
‚Ä¢ /me ‚Äî See your settings details\\.

‚ö†Ô∏èNote : IF Header Footer Status is Disabled Then Header Not Show No Matter It Set Or Not

If you have any problem, click the button below to contact us\\.
  `;

  bot.sendMessage(chatId, helpMessage, {
      parse_mode: "MarkdownV2",
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "Contact Us",
              url: "https://t.me/yummyurl_admin",
            },
          ],
        ],
      },
    })
    .catch((err) => console.error("Error sending /help message:", err));
});

bot.onText(/\/header(.*)/, (msg, match) => {
    const chatId = msg.chat.id;
    const headerText = match[1]?.trim(); // Extract header text
  
    try {
      // Check if user data exists
      const currentHeader = Database.getUserData(chatId, "header");
  
      if (!headerText) {
        // If no text is provided
        bot.sendMessage(
          chatId,
          `·¥õ·¥è Íú±·¥á·¥õ ·¥õ ú·¥á  ú·¥á·¥Ä·¥Ö·¥á Ä ·¥õ·¥áx·¥õ Íú∞·¥è Ä ·¥á·¥†·¥á Ä è ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á ·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥ ·¥è Ä ·¥õ·¥áx·¥õ, ·¥ä·¥úÍú±·¥õ  Ä·¥á·¥ò ü è ·¥°…™·¥õ ú ·¥õ ú·¥á ·¥õ·¥áx·¥õ  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥úÍú±·¥á\.  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥úÍú±·¥á ·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥Ä  ü…™…¥·¥á  ô Ä·¥á·¥Ä·¥ã\.\n\n` +
            `üóë ·¥õ·¥è ADD ·¥õ ú·¥á  ú·¥á·¥Ä·¥Ö·¥á Ä ·¥õ·¥áx·¥õ, ·¥úÍú±·¥á ·¥õ ú·¥á Íú∞·¥è ü ü·¥è·¥°…™…¥…¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:\n/header HEADER_TEXT\n\n` +
            `üóë ·¥õ·¥è  Ä·¥á·¥ç·¥è·¥†·¥á ·¥õ ú·¥á  ú·¥á·¥Ä·¥Ö·¥á Ä ·¥õ·¥áx·¥õ, ·¥úÍú±·¥á ·¥õ ú·¥á Íú∞·¥è ü ü·¥è·¥°…™…¥…¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:\n/header  Ä·¥á·¥ç·¥è·¥†·¥á\n\n` +
            `‚ö†Ô∏è HEADER Status Must be Enabled for more click \me \n\n` +

            `·¥õ ú…™Íú± …™Íú± ·¥Ä  ú·¥á ü·¥òÍú∞·¥ú ü ·¥°·¥Ä è ·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥Ä ·¥Ñ·¥è…¥Íú±…™Íú±·¥õ·¥á…¥·¥õ  ú·¥á·¥Ä·¥Ö·¥á Ä ·¥õ·¥è ·¥Ä ü ü ·¥èÍú∞  è·¥è·¥ú Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥áÍú±. ·¥á…¥·¥ä·¥è èüéâ\n\n` +
            `üìú CURRENT HEADER: ${currentHeader || "None"}`
        );
      } else if (headerText.toLowerCase() === "remove") {
        // Remove header
        if (currentHeader) {
          Database.removeUserData(chatId, "header");
          bot.sendMessage(chatId, "‚úÖ Header text has been removed.");
        } else {
          bot.sendMessage(chatId, "‚ö†Ô∏è No header text found to remove.");
        }
      } else {
        // Update or add header
        if (currentHeader) {
          Database.updateUserData(chatId, "header", headerText);
          bot.sendMessage(chatId, `‚úÖ Header text has been updated:\n\n${headerText}`);
        } else {
          Database.saveUserData(chatId, "header", headerText);
          bot.sendMessage(chatId, `‚úÖ Header text has been added:\n\n${headerText}`);
        }
      }
    } catch (error) {
      console.error("Error handling /header command:", error);
      bot.sendMessage(chatId, "‚ö†Ô∏è An error occurred while processing your request.");
    }
  });
  
// /footer command
bot.onText(/\/footer(.*)/, (msg, match) => {
    const chatId = msg.chat.id;
    const footerText = match[1]?.trim(); // Extract footer text
  
    try {
      // Check if user data exists for footer
      const currentFooter = Database.getUserData(chatId, "footer");
  
      if (!footerText) {
        // If no text is provided
        bot.sendMessage(
          chatId,
          `·¥õ·¥è Íú±·¥á·¥õ ·¥õ ú·¥á Íú∞·¥è·¥è·¥õ·¥á Ä ·¥õ·¥áx·¥õ Íú∞·¥è Ä ·¥á·¥†·¥á Ä è ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á ·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥ ·¥è Ä ·¥õ·¥áx·¥õ, ·¥ä·¥úÍú±·¥õ  Ä·¥á·¥ò ü è ·¥°…™·¥õ ú ·¥õ ú·¥á ·¥õ·¥áx·¥õ  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥úÍú±·¥á.  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥úÍú±·¥á ·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥Ä  ü…™…¥·¥á  ô Ä·¥á·¥Ä·¥ã\.\n\n` +
            `üóë ·¥õ·¥è ADD ·¥õ ú·¥á Íú∞·¥è·¥è·¥õ·¥á Ä ·¥õ·¥áx·¥õ, ·¥úÍú±·¥á ·¥õ ú·¥á Íú∞·¥è ü ü·¥è·¥°…™…¥…¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:\n/footer FOOTER_TEXT\n\n` +
            `üóë ·¥õ·¥è  Ä·¥á·¥ç·¥è·¥†·¥á ·¥õ ú·¥á Íú∞·¥è·¥è·¥õ·¥á Ä ·¥õ·¥áx·¥õ, ·¥úÍú±·¥á ·¥õ ú·¥á Íú∞·¥è ü ü·¥è·¥°…™…¥…¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:\n/footer  Ä·¥á·¥ç·¥è·¥†·¥á\n\n` +
            `‚ö†Ô∏è FOOTER Status Must be Enabled for more click \me \n\n` +
            `·¥õ ú…™Íú± …™Íú± ·¥Ä  ú·¥á ü·¥òÍú∞·¥ú ü ·¥°·¥Ä è ·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥Ä ·¥Ñ·¥è…¥Íú±…™Íú±·¥õ·¥á…¥·¥õ Íú∞·¥è·¥è·¥õ·¥á Ä ·¥õ·¥è ·¥Ä ü ü ·¥èÍú∞  è·¥è·¥ú Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥áÍú±. ·¥á…¥·¥ä·¥è èüéâ\n\n` +
            `üìú CURRENT FOOTER: ${currentFooter || "None"}`
        );
      } else if (footerText.toLowerCase() === "remove") {
        // Remove footer
        if (currentFooter) {
          Database.removeUserData(chatId, "footer");
          bot.sendMessage(chatId, "‚úÖ Footer text has been removed.");
        } else {
          bot.sendMessage(chatId, "‚ö†Ô∏è No footer text found to remove.");
        }
      } else {
        // Update or add footer
        if (currentFooter) {
          Database.updateUserData(chatId, "footer", footerText);
          bot.sendMessage(chatId, `‚úÖ Footer text has been updated:\n\n${footerText}`);
        } else {
          Database.saveUserData(chatId, "footer", footerText);
          bot.sendMessage(chatId, `‚úÖ Footer text has been added:\n\n${footerText}`);
        }
      }
    } catch (error) {
      console.error("Error handling /footer command:", error);
      bot.sendMessage(chatId, "‚ö†Ô∏è An error occurred while processing your request.");
    }
  });
  
  bot.onText(/\/username(.*)/, (msg, match) => {
    const chatId = msg.chat.id;
    const usernameInput = match[1]?.trim(); // Extract username input
  
    try {
      // Check if user data exists for username
      const currentUsername = Database.getUserData(chatId, "username");
  
      if (!usernameInput) {
        // If no username is provided
        bot.sendMessage(
          chatId,
          `·¥õ·¥è Íú±·¥á·¥õ ·¥õ ú·¥á ·¥úÍú±·¥á Ä…¥·¥Ä·¥ç·¥á ·¥õ ú·¥Ä·¥õ ·¥°…™ ü ü  ô·¥á ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ·¥Ä ü ü è  Ä·¥á·¥ò ü·¥Ä·¥Ñ·¥á·¥Ö ·¥°…™·¥õ ú ·¥è·¥õ ú·¥á Ä ·¥úÍú±·¥á Ä…¥·¥Ä·¥ç·¥áÍú± …™…¥ ·¥õ ú·¥á ·¥ò·¥èÍú±·¥õ, ·¥úÍú±·¥á ·¥õ ú·¥á Íú∞·¥è ü ü·¥è·¥°…™…¥…¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:\n\n` +
            `/username  è·¥è·¥ú Ä_·¥úÍú±·¥á Ä…¥·¥Ä·¥ç·¥á\n\n` +
            `(…¥·¥è·¥õ·¥á: ·¥Ö·¥è …¥·¥è·¥õ …™…¥·¥Ñ ü·¥ú·¥Ö·¥á ·¥õ ú·¥á @ Íú± è·¥ç ô·¥è ü …™…¥  è·¥è·¥ú Ä \·¥úÍú±·¥á Ä…¥·¥Ä·¥ç·¥á.)\n\n` +
            `·¥õ·¥è  Ä·¥á·¥ç·¥è·¥†·¥á ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥úÍú±·¥á Ä…¥·¥Ä·¥ç·¥á, ·¥úÍú±·¥á ·¥õ ú·¥á Íú∞·¥è ü ü·¥è·¥°…™…¥…¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:\n\n` +
            `/username  Ä·¥á·¥ç·¥è·¥†·¥á\n\n` +
            `üìú CURRENT USERNAME: ${currentUsername || "None"}`
        );
      } else if (usernameInput.toLowerCase() === "remove") {
        // Remove username
        if (currentUsername) {
          Database.removeUserData(chatId, "username");
          bot.sendMessage(chatId, "‚úÖ Username has been removed.");
        } else {
          bot.sendMessage(chatId, "‚ö†Ô∏è No username found to remove.");
        }
      } else {
        // Add or update username
        if (/[^a-zA-Z0-9_]/.test(usernameInput)) {
          bot.sendMessage(
            chatId,
            "‚ùå Invalid username. Please use only letters, numbers, and underscores, without the @ symbol."
          );
        } else {
          if (currentUsername) {
            Database.updateUserData(chatId, "username", usernameInput);
            bot.sendMessage(
              chatId,
              `‚úÖ Username has been updated:\n\n${usernameInput}`
            );
          } else {
            Database.saveUserData(chatId, "username", usernameInput);
            bot.sendMessage(
              chatId,
              `‚úÖ Username has been set:\n\n${usernameInput}`
            );
          }
        }
      }
    } catch (error) {
      console.error("Error handling /username command:", error);
      bot.sendMessage(chatId, "‚ö†Ô∏è An error occurred while processing your request.");
    }
  });
  

  bot.onText(/\/me/, async (msg) => {
    const chatId = msg.chat.id;
  
    // Fetch user-specific settings
    const website = "YummyURL";
    const api = Database.getUserData(chatId, "api") || "None";
    const username = Database.getUserData(chatId, "username") || "None";
    const headerText = Database.getUserData(chatId, "header") || "None";
    const footerText = Database.getUserData(chatId, "footer") || "None";
  
    // Fetch header and footer status (default to enabled if not set)
    let headerStatus = Database.getUserData(chatId, "header_status");
    let footerStatus = Database.getUserData(chatId, "footer_status");
  
    if (headerStatus === undefined) {
      headerStatus = 1; // Default to enabled
      Database.saveUserData(chatId, "header_status", headerStatus);
    }
    if (footerStatus === undefined) {
      footerStatus = 1; // Default to enabled
      Database.saveUserData(chatId, "footer_status", footerStatus);
    }
  
    const isHeaderEnabled = headerStatus === 1;
    const isFooterEnabled = footerStatus === 1;
  
    // Prepare the response message
    const response = `
  üîß ** ú·¥á Ä·¥á ·¥Ä Ä·¥á ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± Íú∞·¥è Ä ·¥õ ú…™Íú±  ô·¥è·¥õ**:
  
  - üåê **·¥°·¥á ôÍú±…™·¥õ·¥á**: ${website}
  
  - üîå **·¥Ä·¥ò…™**: ${api}
  
  - üìé **·¥úÍú±·¥á Ä…¥·¥Ä·¥ç·¥á**: @${username}
  
  - üìù ** ú·¥á·¥Ä·¥Ö·¥á Ä ·¥õ·¥áx·¥õ**:
  ${headerText}
  
  - üìù **Íú∞·¥è·¥è·¥õ·¥á Ä ·¥õ·¥áx·¥õ**:
  ${footerText}
  `;
  
    // Inline keyboard
    const inlineKeyboard = {
      inline_keyboard: [
        [
          { text: `Header: ${isHeaderEnabled ? "E" : "D"}`, callback_data: "header_static" },
          { text: isHeaderEnabled ? "‚ùå Disable" : "‚úÖ Enable", callback_data: "toggle_header" },
        ],
        [
          { text: `Footer: ${isFooterEnabled ? "E" : "D"}`, callback_data: "footer_static" },
          { text: isFooterEnabled ? "‚ùå Disable" : "‚úÖ Enable", callback_data: "toggle_footer" },
        ],
      ],
    };
  
    // Send the message with inline keyboard
    bot.sendMessage(chatId, response, {
      parse_mode: "Markdown",
      reply_markup: inlineKeyboard,
    });
  });
  
  // Handle inline button callbacks
  bot.on("callback_query", (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
  
    let responseText = "";
    if (data === "toggle_header") {
      // Fetch and toggle header status
      let headerStatus = Database.getUserData(chatId, "header_status");
      if (headerStatus === undefined) {
        headerStatus = 1; // Default to enabled if not present
      }
      const newHeaderStatus = headerStatus === 1 ? 0 : 1;
      Database.saveUserData(chatId, "header_status", newHeaderStatus);
      responseText = newHeaderStatus === 1 ? "‚úÖ Header is now enabled." : "‚ùå Header is now disabled.";
    } else if (data === "toggle_footer") {
      // Fetch and toggle footer status
      let footerStatus = Database.getUserData(chatId, "footer_status");
      if (footerStatus === undefined) {
        footerStatus = 1; // Default to enabled if not present
      }
      const newFooterStatus = footerStatus === 1 ? 0 : 1;
      Database.saveUserData(chatId, "footer_status", newFooterStatus);
      responseText = newFooterStatus === 1 ? "‚úÖ Footer is now enabled." : "‚ùå Footer is now disabled.";
    } else if (data === "header_static" || data === "footer_static") {
      // Prevent clicks on static buttons
      bot.answerCallbackQuery(callbackQuery.id, { text: "This button is not clickable." });
      return;
    }
  
    // Update the user with an alert and refresh `/me` to show updated status
    bot.answerCallbackQuery(callbackQuery.id, { text: responseText });
    bot.sendMessage(chatId, "‚úÖ The Status Is CHANGED To View Updated Status Clicked /me"); // Refresh the `/me` command
  });
  

  bot.onText(/\/api(.*)/, (msg, match) => {
    const chatId = msg.chat.id;
    const apiText = match[1]?.trim(); // Extract API text
  
    try {
      // Check if user data exists
      const currentApi = Database.getUserData(chatId, "api");
  
      if (!apiText) {
        // If no text is provided
        if (currentApi) {
          bot.sendMessage(
            chatId,
            `üîß ·¥õ·¥è Íú±·¥á·¥õ ·¥è Ä ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥õ ú·¥á API, ·¥úÍú±·¥á ·¥õ ú·¥á Íú∞·¥è ü ü·¥è·¥°…™…¥…¢ Íú∞·¥è Ä·¥ç·¥Ä·¥õ:\n` +
              `/api API_KEY\n\n` +
              `üóë ·¥õ·¥è  Ä·¥á·¥ç·¥è·¥†·¥á ·¥õ ú·¥á API, ·¥úÍú±·¥á:\n` +
              `/api remove\n\n` +
              `üåü CURRENT API KEY: üóùÔ∏è \`${currentApi}\``
          );
        } else {
          bot.sendMessage(
            chatId,
            `·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥è Ä ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á  è·¥è·¥ú Ä Íú± ú·¥è Ä·¥õ…¥·¥á Ä ·¥°·¥á ôÍú±…™·¥õ·¥á ·¥Ä·¥ò…™.\n\n` 
            
            `Ex: /api a11b67871d303d2e0f76ab0:\n\n` 
            
            `…¢·¥á·¥õ ·¥Ä·¥ò…™ Íú∞ Ä·¥è·¥ç Yummyurl.com \n\n<br>
            
            ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ yummyurl.com ·¥Ä·¥ò…™: None`
          );
        }
      } else if (apiText.toLowerCase() === "remove") {
        // Remove API
        if (currentApi) {
          Database.removeUserData(chatId, "api");
          bot.sendMessage(chatId, "‚úÖ API key has been removed.");
        } else {
          bot.sendMessage(chatId, "‚ö†Ô∏è No API key found to remove.");
        }
      } else {
        // Update or add API
        if (currentApi) {
          Database.updateUserData(chatId, "api", apiText);
          bot.sendMessage(chatId, `‚úÖ API key has been updated to:\nüóùÔ∏è \`${apiText}\``);
        } else {
          Database.saveUserData(chatId, "api", apiText);
          bot.sendMessage(chatId, `‚úÖ API key has been added:\nüóùÔ∏è \`${apiText}\``);
        }
      }
    } catch (error) {
      console.error("Error handling /api command:", error);
      bot.sendMessage(chatId, "‚ö†Ô∏è An error occurred while processing your request.");
    }
  });




// url shorten code


// Helper: Fetch user settings for header/footer
function getUserSettings(chatId) {
  const dbData = Database.getDatabaseData();
  return dbData[chatId] || {};
}

function getUserToken(chatId) {
  return Database.getUserData(chatId, "api");
}

// Process messages (text and images with captions)
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const messageText = msg.text || msg.caption; // Handle text or caption from images

  // Ignore non-text messages without captions
  if (!messageText) {
    return;
  }

  // Ignore commands
  if (messageText.startsWith("/")) {
    return;
  }

  // Extract URLs from the text or caption
  const urls = extractUrls(messageText);
  if (urls.length === 0) {
    bot.sendMessage(chatId, "‚ö† No URLs detected in the message.");
    return;
  }

  // Check if API token is set
  const userToken = getUserToken(chatId);
  if (!userToken) {
    bot.sendMessage(
      chatId,
      "‚ö† Please set your API token first using `/api YOUR_YUMMYURL_API_TOKEN`."
    );
    return;
  }

  // Fetch user's header/footer settings
  const userSettings = getUserSettings(chatId);
  const header = userSettings.header || "";
  const footer = userSettings.footer || "";
  const headerStatus = userSettings.header_status ?? 1; // Default: enabled
  const footerStatus = userSettings.footer_status ?? 1; // Default: enabled

  try {
    let updatedText = messageText;

    // Shorten each URL
    for (const url of urls) {
      const apiUrl = `https://yummyurl.com/api?api=${userToken}&url=${encodeURIComponent(
        url
      )}`;
      const response = await axios.get(apiUrl);
      const shortUrl = response.data.shortenedUrl || url;

      // Replace the URL in the text while keeping the rest intact
      const regex = new RegExp(url, "g"); // Replace all occurrences
      updatedText = updatedText.replace(regex, shortUrl);
    }

    // Attach header and footer if enabled
    if (headerStatus === 1 && header.trim()) {
      updatedText = `${header.trim()}\n${updatedText}`;
    }
    if (footerStatus === 1 && footer.trim()) {
      updatedText = `${updatedText}\n${footer.trim()}`;
    }

    // Send the final message
    if (msg.photo) {
      // If the message contains a photo, send the photo with the updated caption
      const photo = msg.photo[msg.photo.length - 1].file_id; // Get the highest resolution photo
      bot.sendPhoto(chatId, photo, { caption: updatedText });
    } else {
      // Otherwise, send a regular text message
      bot.sendMessage(chatId, updatedText);
    }
  } catch (error) {
    console.error("Error processing URLs:", error.message);
    bot.sendMessage(
      chatId,
      "‚ö† An error occurred while shortening the URLs. Please try again."
    );
  }
});

// Utility: Extract URLs from text
function extractUrls(text) {
  if (!text) {
    return [];
  }
  const urlPattern = /(https?:\/\/[^\s]+)/g;
  return text.match(urlPattern) || [];
}
